openapi: 3.0.0
info:
  description: "This is a sample server Nautilus Data Processing Microservice Api."
  version: "0.2.3-SNAPSHOT"
  title: "Nautilus Data Processing Microservice"
  termsOfService: ""
  contact:
    email: "piets.yurii@gmail.com"
#cahnge host on prod
tags:
  - name: "car"
    description: "Operations about car."
  - name: "user"
    description: "Operations about user."

servers:
  - url: http://127.0.0.1:8081/

securityDefinitions:
  BasicAuth:
    type: basic

paths:
  /user:
    get:
      tags:
        - user
      description: Basic info that cotains information email, phone number, name, surname
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"

        401:
          description: Not authenticated
        404:
          description: User not found
      security:
        - BasicAuth: []

    post:
      tags:
        - user
      summary: Register user
      description: Register user data passed as body of the requst
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserDto"
      responses:
        202:
          description: Accepted
        406:
          description: User registration info is not acceptable
          content:
            application/json:
              schema:
                type: string
                enum: [EMAIL_NOT_FREE, PHONE_NUMBER_NOT_FREE]
      security: []

    patch:
      tags:
        - user
      summary: Partial update
      description: Partial update of user data
      requestBody:
        description: Partial update body due to specification (http://jsonpatch.com/)
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/PartialUpdateBody"
      responses:
        202:
          description: Accepted
        400:
          description: Bad request
        401:
          description: Not authenticated
        404:
          description: User not found
        422:
          description: Unprocessable Entity
      security:
        - BasicAuth: []

    delete:
      tags:
          - user
      summary: Delete user
      description: Delete all user data, including all cars data
      responses:
        200:
          description: OK
        401:
          description: Not authenticated
        404:
          description: User not found
      security:
        - BasicAuth: []

  /user/cars:
    get:
      tags:
        - user
      summary: User's cars
      description: User's cars
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                   $ref: "#/components/schemas/CarDto"
        401:
          description: Not authenticated
        404:
          description: User not found
      security:
        - BasicAuth: []

  /car/{beaconId}:
    get:
      tags:
          - car
      summary: Car info
      description: Car basic infornmation and description
      parameters:
        - in: path
          name: beaconId
          schema:
            type: string
          required: true
          description: Id of the beacon that is paired with the car
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarDto"
        401:
          description: Not authenticated
        404:
          description: Car not found
      security:
        - BasicAuth: []

    patch:
      tags:
        - car
      summary: Update car
      description: Partial update of the car
      parameters:
        - in: path
          name: beaconId
          schema:
            type: string
          required: true
          description: Id of the beacon that is paired with the car
      requestBody:
        description: Partial update body due to specification (http://jsonpatch.com/)
        required: true
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartialUpdateBody"
      responses:
        202:
          description: Accepted
        400:
          description: Bad Request
        401:
          description: Not authenticated
        403:
          description: User do not have permission to modify current car
        404:
          description: Car does not exist
        422:
          description: Unprocessable Entity
      security:
        - BasicAuth: []

    delete:
      tags:
        - car
      summary: Delete car
      description: Delete all car data with all captures data
      parameters:
        - in: path
          name: beaconId
          schema:
            type: string
          required: true
          description: Id of the beacon that is paired with the car
      responses:
        200:
          description: OK
        401:
          description: Not authenticated
        404:
          description: User not found
        406:
          description: User does not have permission to delete the car
      security:
        - BasicAuth: []

  /car:
    post:
      tags:
        - car
      summary: Register car
      description: Register car passed as a parameter and asign it to the current user
      requestBody:
          description: Car register dto
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarRegisterDto"
      responses:
        202:
          description: Accepted
        401:
          description: Not authenticated
        404:
          description: User not found
        406:
          description: Car with that beaconId or registration number already exists.
      security:
        - BasicAuth: []

  /car/{beaconId}/status:
    get:
      tags:
        - car
      summary: Car status
      description: Car status
      parameters:
        - in: path
          name: beaconId
          schema:
            type: string
          required: true
          description: Id of the beacon that is paired with the car
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                enum: [OK, STOLEN, TESTING]
        401:
          description: Not authenticated
        404:
          description: Car not found
      security:
        - BasicAuth: []

  /car/{beaconId}/captures:
    get:
      tags:
        - car
      summary: Car captures
      description: List of the car captures points
      parameters:
        - in: path
          name: beaconId
          schema:
            type: string
          required: true
          description: Id of the beacon that is paired with the car
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CarStatusSnapshotDto"
        401:
          description: Not authenticated
        404:
          description: Car not found
        406:
          description: Not enoght permissions to get info.
      security:
          - BasicAuth: []

    post:
      tags:
        - car
      summary: Capture car
      description: Capture car location with timestamp
      parameters:
        - in: path
          name: beaconId
          schema:
            type: string
          required: true
          description: Id of the beacon that is paired with the car
      requestBody:
          description: Car register dto
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarStatusSnapshotDto"
      responses:
        202:
          description: Accepted
        401:
          description: Not authenticated
      security:
        - BasicAuth: []

components:

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  schemas:
    UserInfo:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        surname:
          type: string
        phoneNumber:
          type: string

    RegisterUserDto:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        surname:
          type: string
        phoneNumber:
          type: string
        password:
          type: string

    PartialUpdateBody:
      type: object
      properties:
        op:
          type: string
        path:
          type: string
        value:
          type: string

    CarRegisterDto:
      type: object
      properties:
        beaconId:
          type: string
        registerNumber:
          type: string
        mark:
          type: string
        model:
          type: string
        color:
          type: string
        yearOfProduction:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - OK
            - STOLEN
            - TESTING

    CarDto:
      properties:
        beaconId:
          type: string
        registerNumber:
          type: string
        mark:
          type: string
        model:
          type: string
        color:
          type: string
        yearOfProduction:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - OK
            - STOLEN
            - TESTING

    CarStatusSnapshotDto:
      type: object
      properties:
        location:
          $ref: "#/components/schemas/Location"
        captureTime:
          type: object
          description: java.time.LocalDateTime

    Location:
      type: object
      properties:
        longitude:
          type: number
        latitude:
          type: number
